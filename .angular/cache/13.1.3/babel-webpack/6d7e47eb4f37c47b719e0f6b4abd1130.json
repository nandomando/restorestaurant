{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { Usercard } from './usercard.model';\nimport { take, map, tap, switchMap } from 'rxjs/operators';\nimport { AuthService } from './auth/auth.service';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth/auth.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let UsercardsService = /*#__PURE__*/(() => {\n  class UsercardsService {\n    constructor(authService, http) {\n      this.authService = authService;\n      this.http = http;\n      this._usercards = new BehaviorSubject([]);\n      this._useronlyrestocards = new BehaviorSubject([]);\n    }\n\n    get useronlyrestocards() {\n      return this._useronlyrestocards.asObservable();\n    }\n\n    get usercards() {\n      return this._usercards.asObservable();\n    } // fetchUserCardsexperiment() {\n    //   let fetchedUserId: string;\n    //   return this.authService.userId.pipe(\n    //     take(1),\n    //     switchMap(userId => {\n    //     if (!userId) {\n    //       throw new Error('User not found!');\n    //     }\n    //     fetchedUserId = userId;\n    //     return this.authService.token;\n    //   }),\n    //   take(1),\n    //   switchMap(token => {\n    //     return this.http\n    //     .get<{[key: string]: UserCardFetch}>(\n    //       `https://resto-57119.firebaseio.com/usercards.json?orderBy=\"userId\"&equalTo=\"${fetchedUserId}\"&auth=${token}`\n    //     );\n    //   }),\n    //   map(resData => {\n    //     const Usercardarr = [];\n    //     for (const key in resData) {\n    //       if (resData.hasOwnProperty(key)) {\n    //         Usercardarr.push(new Usercard(\n    //           key,\n    //           resData[key].imageUrl,\n    //           resData[key].name,\n    //           resData[key].address,\n    //           resData[key].points,\n    //           resData[key].freemeal,\n    //           resData[key].restoId,\n    //           resData[key].userId,\n    //           )\n    //         );\n    //       }\n    //     }\n    //     return Usercardarr;\n    //   }),\n    //   tap(usercards => {\n    //     this._usercards.next(usercards);\n    //   })\n    //   );\n    // }\n\n\n    fetchOnlyUsercartas(id) {\n      return this.http.get(`https://resto-57119.firebaseio.com/usercards.json?`).subscribe(resData => {\n        console.log('resdata de fetchonlyusercartas:', resData);\n        const usercards = [];\n\n        for (const key in resData) {\n          if (resData.hasOwnProperty(key) && resData[key].userId === id) {\n            usercards.push(new Usercard(key, resData[key].imageUrl, resData[key].name, resData[key].address, resData[key].points, resData[key].freemeal, resData[key].restoId, resData[key].userId));\n          }\n        }\n\n        this._useronlyrestocards.next(usercards);\n      });\n    }\n\n    fetchUserCardsoriginal() {\n      let fetchedUserId;\n      return this.authService.userId.pipe(switchMap(userId => {\n        if (!userId) {\n          throw new Error('User not found!');\n        }\n\n        fetchedUserId = userId;\n        return this.authService.token;\n      }), take(1), switchMap(token => {\n        return this.http.get(`https://resto-57119.firebaseio.com/usercards.json?`);\n      }), map(resData => {\n        const Usercardarr = [];\n\n        for (const key in resData) {\n          if (resData.hasOwnProperty(key)) {\n            Usercardarr.push(new Usercard(key, resData[key].imageUrl, resData[key].name, resData[key].address, resData[key].points, resData[key].freemeal, resData[key].restoId, resData[key].userId));\n          }\n        }\n\n        return Usercardarr;\n      }), tap(usercards => {\n        this._usercards.next(usercards);\n      }));\n    }\n\n    updateCard(cardId, points, freemeal) {\n      let updatedusercards;\n      let fetchedToken;\n      return this.authService.token.pipe(take(1), switchMap(token => {\n        fetchedToken = token;\n        return this.usercards;\n      }), take(1), switchMap(exercises => {\n        if (!exercises || exercises.length <= 0) {\n          return this.fetchUserCardsoriginal();\n        } else {\n          return of(exercises);\n        }\n      }), switchMap(exercises => {\n        const updatedExerciseIndex = exercises.findIndex(ex => ex.id === cardId);\n        updatedusercards = [...exercises];\n        const oldExe = updatedusercards[updatedExerciseIndex];\n        updatedusercards[updatedExerciseIndex] = new Usercard(oldExe.id, oldExe.imageUrl, oldExe.name, oldExe.address, points, freemeal, oldExe.restoId, oldExe.userId);\n        console.log(oldExe);\n        return this.http.put(`https://resto-57119.firebaseio.com/usercards/${cardId}.json?`, Object.assign(Object.assign({}, updatedusercards[updatedExerciseIndex]), {\n          id: null\n        }));\n      }), tap(() => {\n        this._usercards.next(updatedusercards);\n\n        console.log('updatedusercards from updatecard function service:', updatedusercards);\n      }));\n    }\n\n  }\n\n  UsercardsService.ɵfac = function UsercardsService_Factory(t) {\n    return new (t || UsercardsService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  UsercardsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsercardsService,\n    factory: UsercardsService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsercardsService;\n})();","map":null,"metadata":{},"sourceType":"module"}