{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { BehaviorSubject, from } from 'rxjs';\nimport { User } from './user.model';\nimport { map, tap } from 'rxjs/operators';\nimport { Plugins } from '@capacitor/core';\nimport { AlertController } from '@ionic/angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/angular\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, alertCtrl) {\n      this.http = http;\n      this.alertCtrl = alertCtrl;\n      this._user = new BehaviorSubject(null);\n    }\n\n    get userIsAuthenticated() {\n      return this._user.asObservable().pipe(map(user => {\n        if (user) {\n          return !!user.token;\n        } else {\n          return false;\n        }\n      }));\n    }\n\n    get userId() {\n      return this._user.asObservable().pipe(map(user => {\n        if (user) {\n          return user.id;\n        } else {\n          return null;\n        }\n      }));\n    }\n\n    get token() {\n      return this._user.asObservable().pipe(map(user => {\n        if (user) {\n          return user.token;\n        } else {\n          return null;\n        }\n      }));\n    }\n\n    autoLogin() {\n      return from(Plugins.Storage.get({\n        key: 'authData'\n      })).pipe(map(storedData => {\n        if (!storedData || !storedData.value) {\n          return null;\n        }\n\n        const parsedData = JSON.parse(storedData.value);\n        const expirationTime = new Date(parsedData.tokenExpirationDate);\n\n        if (expirationTime <= new Date()) {\n          return null;\n        }\n\n        const user = new User(parsedData.userId, parsedData.email, parsedData.token, expirationTime);\n        return user;\n      }), tap(user => {\n        if (user) {\n          this._user.next(user);\n\n          this.autoLogout(user.tokenDuration);\n        }\n      }), map(user => {\n        return !!user;\n      }));\n    }\n\n    signup(email, password) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${environment.firebaseAPIKey}`, {\n        email,\n        password,\n        returnSecureToken: true\n      }).pipe(tap(this.setUserData.bind(this)));\n    }\n\n    login(email, password) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.firebaseAPIKey}`, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(tap(this.setUserData.bind(this)));\n    }\n\n    resetpassword(emailstring) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=${environment.firebaseAPIKey}`, {\n        requestType: 'PASSWORD_RESET',\n        emailstring\n      }).subscribe(() => {\n        this.alertCtrl.create({\n          header: 'Request has been send',\n          message: 'Please check your E-mail',\n          buttons: ['Okay']\n        }).then(alertEl => alertEl.present());\n      });\n    }\n\n    logout() {\n      if (this.activeLogoutTimer) {\n        clearTimeout(this.activeLogoutTimer);\n      }\n\n      this._user.next(null);\n\n      Plugins.Storage.remove({\n        key: 'authData'\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.activeLogoutTimer) {\n        clearTimeout(this.activeLogoutTimer);\n      }\n    }\n\n    autoLogout(duration) {\n      if (this.activeLogoutTimer) {\n        clearTimeout(this.activeLogoutTimer);\n      }\n\n      this.activeLogoutTimer = setTimeout(() => {\n        this.logout();\n      }, duration);\n    }\n\n    setUserData(userData) {\n      const expirationTime = new Date(new Date().getTime() + +userData.expiresIn * 1000);\n      const user = new User(userData.localId, userData.email, userData.idToken, expirationTime);\n\n      this._user.next(user);\n\n      this.autoLogout(user.tokenDuration);\n      this.storeAuthData(userData.localId, userData.idToken, expirationTime.toISOString(), userData.email);\n    }\n\n    storeAuthData(userId, token, tokenExpirationDate, email) {\n      const data = JSON.stringify({\n        userId: userId,\n        token: token,\n        tokenExpirationDate: tokenExpirationDate,\n        email: email\n      });\n      Plugins.Storage.set({\n        key: 'authData',\n        value: data\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AlertController));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}