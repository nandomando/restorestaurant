{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { Restocard } from './restocard.model';\nimport { take, map, tap, switchMap } from 'rxjs/operators';\nimport { AuthService } from './auth/auth.service';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth/auth.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let RestocardsService = /*#__PURE__*/(() => {\n  class RestocardsService {\n    constructor(authService, http) {\n      this.authService = authService;\n      this.http = http;\n      this._restocards = new BehaviorSubject([]);\n    }\n\n    get restocards() {\n      return this._restocards.asObservable();\n    }\n\n    fetchCards() {\n      let fetchedUserId;\n      return this.authService.userId.pipe(switchMap(userId => {\n        if (!userId) {\n          throw new Error('User not found!');\n        }\n\n        fetchedUserId = userId;\n        return this.authService.token;\n      }), take(1), switchMap(token => {\n        return this.http.get(`https://restorestaurant-11270.firebaseio.com/restocards.json?orderBy=\"userId\"&equalTo=\"${fetchedUserId}\"&auth=${token}`);\n      }), map(resData => {\n        const Cardarr = [];\n\n        for (const key in resData) {\n          if (resData.hasOwnProperty(key)) {\n            Cardarr.push(new Restocard(key, resData[key].imageUrl, resData[key].name, resData[key].address, resData[key].userId));\n          }\n        }\n\n        return Cardarr;\n      }), tap(restocards => {\n        this._restocards.next(restocards);\n      }));\n    }\n\n    addRestocard(name, address, imageUrl) {\n      let generatedId;\n      let fetchedUserId;\n      let newRestocard;\n      return this.authService.userId.pipe(take(1), switchMap(userId => {\n        fetchedUserId = userId;\n        return this.authService.token;\n      }), take(1), switchMap(token => {\n        if (!fetchedUserId) {\n          throw new Error('No user found');\n        }\n\n        newRestocard = new Restocard(Math.random().toString(), imageUrl, name, address, fetchedUserId);\n        return this.http.post(`https://restorestaurant-11270.firebaseio.com/restocards.json?auth=${token}`, Object.assign(Object.assign({}, newRestocard), {\n          id: null\n        }));\n      }), switchMap(resData => {\n        generatedId = resData.name;\n        return this.restocards;\n      }), take(1), tap(restocards => {\n        newRestocard.id = generatedId;\n\n        this._restocards.next(restocards.concat(newRestocard));\n      }));\n    }\n\n    uploadImage(image) {\n      const uploadData = new FormData();\n      uploadData.append('image', image);\n      return this.authService.token.pipe(take(1), switchMap(token => {\n        return this.http.post('https://us-central1-restorestaurant-11270.cloudfunctions.net/storeImage', uploadData, {\n          headers: {\n            Authorization: 'Bearer ' + token\n          }\n        });\n      }));\n    }\n\n  }\n\n  RestocardsService.ɵfac = function RestocardsService_Factory(t) {\n    return new (t || RestocardsService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  RestocardsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestocardsService,\n    factory: RestocardsService.ɵfac,\n    providedIn: 'root'\n  });\n  return RestocardsService;\n})();","map":null,"metadata":{},"sourceType":"module"}